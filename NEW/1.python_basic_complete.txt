PYTHON

1. HELLO WORLD (print())
-----------------------
print("hello world") #double quotes
print('hey whats up') #single quotes

2. COMMENTING (# and ''')
-------------------------
a . #this is a single line comment
b . '''
      this is
              a
                multiline command'''

3. VARIABLES AND DATATYPES
--------------------------

(python doesnt need datatypes to be declared)

number1 = 800 #integer
name = "JOHN"  #string
_online = True #boolean
weight = 60.987 #float

4.TYPE OF VARIABLE (type())
----------------------------
name = "JOHN"
age = 20
wieght = 67.980
isOnline = False

print(type(name)) #<class 'str'>
print(type(age))  #<class 'int'>
print(type(weight)) #<class 'float'>
print(type(isOnline)) #<class 'bool'>

4. DECLARE VARIABLE IN SINGLE LINE
----------------------------------
name,age,weight,isOnline = "JOHN",26,60.897,False


5.OPERATORS - ARITHMETIC OPERATORS (calculate values)
----------------------------------------------------
+   : Addition (adds 2 or more numbers)
-   : Substraction (substracts 2 or more numbers)
*   : Multiplication (Multiply 2 or more numbers)
/   : Division (Divide 2 or more number)
%   : Modulus (remainder after dividing 2 or more numbers)
**  : Exponentiation (find power)  (2**2 == 2^2 (square) , 2**3 == 2^3 (cube))
//  : Floor Divider (round the division result into whole number), (7 // 3 = 2) (normal 7 /3 = 2.3333333333333335)

6.OPERATORS - ASSIGNMENT OPERATORS (assign values)
--------------------------------------------------
=    : assign (x = 10)
+=   : (x+=4 => x = x+4)
-+   : (x-=4 => x = x-4)
*=   : (x*=4 => x = x*4)
/=   : (x/=4 => x = x/4)
%=   : (x%=4 => x = x%4)
//=  : (x//=4 => x = x//4)
**=  : (x**=4 => x = x**4)

7.OPERATORS - COMPARISON OPERATORS (compare values)
----------------------------------------------------
equal to       : == (a == b) (return true if a same as b)
not equal to   : != (a != b) (return true if a not same as b)
Greater than   : >  (a > b ) (return true if a is greater than b)
Lesser than    : <  (a < b ) (return true if a is lesser than b)
Greater than or equal to : >= (a >= b ) (return true if a is greater than or equal to b)
Lesser than or equal to  : <= (a <= b ) (return true if a is lesser than or equal to b)

8.OPERATORS - LOGICAL OPERATORS (combine expressions/stastements)
------------------------------------------------------------------
and  : return true when both statement are true (a<b and a>0)
or   : return true when one statement is true (a<b or a==2)
not  : return opposite result (true if false and false if true) ( not a==200 )

9.STRINGS
----------
a. text = 'hello world' #single quote string
b. text = "hello world" #double quote string
c. text = """
            hello
                  world      
        """ # multiline string

d. text = "python is good"
   index_number = 1
   print(text[index_number]) #access charector from string with index number (result : y)

e. text = "learn python language"
   start_index_number = 2
   end_index_number = 8
   print(text[start_index_number:end_index_number]) #access content from index number to index number
   #result : arn py 

(len)
f. text = "learn python language"
   print(len(text)) #get length of string including whitespace

(strip)
g. text = "   i love python     "
   print(text.strip()) #strips the starting and ending whitespaces

(lower)
h. text = "HELLO PAL"
   print(text.lower()) #converts any uppercase to lowercase, result : hello pal

(upper)
i. text = "hello pal"
   print(text.upper()) #converts any lowercase to uppercase, result : HELLO PAL

(replace)
j. text = "he is a digger"
   old = "d"
   new = "n"
   print(text.replace(old,new)) #replace letter or word  to new word or letter, result : he is a nigger

(format)
k. name = "John"
   age = 27
   text = "my name is {} i am {} years old"
   print(text.format(name,age)) #the placeholder {} will be replaced by the value provided
   #result : my name is John i am 27 years old

10.COLLECTIONS
---------------
 i. LIST
 ii. TUPLE
 iii. SET
 iv. DICTIONARY

a. LIST (METHODS) []

      cars_list = ["porche","bmw","nissan","toyota"]

      print(len(cars_list))             #length of the array, result : 4

      print(cars_list[2])               #access element of array using index number , result : nissan

      cars_list[1]="volkswagen"         #change element using index number, result : ['porche', 'volkswagen', 'nissan', 'toyota']

      cars_list.append("lexus")         #add new value into array, result : ['porche', 'volkswagen', 'nissan', 'toyota', 'lexus']

      cars_list.insert(2,"mercedes")    #add new value in specific position using index number, result : ['porche', 'volkswagen', 'mercedes', 'nissan', 'toyota', 'lexus']

      cars_list.remove("toyota")        #remove a value by its value, result : ['porche', 'volkswagen', 'mercedes', 'nissan', 'lexus']

      del cars_list[1]                  #remove element by its index number, result : ['porche', 'mercedes', 'nissan', 'lexus']

      print("porche" in cars_list)       #check if a value is present in array , result : True

      cars_list.clear()                 #remove every element in the array, result : []

      del cars_list                     #remove the array itself, ie array don't exist, result : NameError: name 'cars_list' is not defined


b. TUPLE  (METHODS) ()

            #-----elements in tuple cannot be changed, added or removed---

            fruits_tuple = ["apple","mango","banana","orange"]

            print(len(fruits_tuple))              #length of the tuple, result : 4

            print(fruits_tuple[1])                # access the element in tuple by index number , result : mango

            print("orange" in fruits_tuple)       #check if a value is present in array , result : True

            del fruits_tuple                      # remove the tuple itself, ie tuple don't exist, result : NameError: name 'fruits_tuple' is not defined


c. SETS (METHODS) {}

            #------set - un ordered and un indexed (index number always changes)------

            vegetable_set = {"carrot","cabbage","onion","potato"}

            print(len(vegetable_set)) #length of the set, result  4

            vegetable_set.add("garlic") #add new value to set, result : {'carrot', 'cabbage', 'garlic', 'onion', 'potato'}

            vegetable_set.update(["eggplant","radish","yam"]) #add multiple values to set, result : {'yam', 'carrot', 'cabbage', 'eggplant', 'potato', 'garlic', 'onion', 'radish'}

            vegetable_set.remove("potato") #removes element from set by the value,result : {'garlic', 'cabbage', 'eggplant', 'carrot', 'radish', 'onion', 'yam'}

            vegetable_set.discard("cabbage") #removes element from set without raising any kind of error, result : {'garlic', 'yam', 'radish', 'eggplant', 'carrot', 'onion'}

            fruits_set = {"apple","strawberry"}
            vegetable_set.union(fruits_set) #adds another set to a set, result :
            mixed_set = vegetable_set.union(fruits_set) #mix elements of a set to another set, result : {'radish', 'strawberry', 'eggplant', 'garlic', 'carrot', 'apple', 'yam', 'onion'}

            vegetable_set.clear() #removes every value from the set, result : set()

            del vegetable_set #remove the set itself, ie set don't exist, result : NameError: name 'vegetable_set' is not defined

            print(vegetable_set[1]) #cannot access elements by index number ,result : TypeError: 'set' object is not subscriptable
            
d. DICTIONARY (METHODS) {key:value}

            #--------store in key value pair------------------

            user1_dictionary = {
                "name":"JOHN",
                "age":25,
                "email":"john123@gmail.com",
                "phone":9879876541
            }
            
            name = user1_dictionary["name"] #access the value by key name, result : JOHN

            name_get = user1_dictionary.get("name") #access the value by key name (get method), result : JOHN

            user1_dictionary["name"]= "MILAN" #change the value by the key, result : {'name': 'MILAN', 'age': 25, 'email': 'john123@gmail.com', 'phone': 9879876541}

            print(len(user1_dictionary)) #get length of key pair value , result : 4

            user1_dictionary["weight"]=67.98 #add new key value pair to the dictionary, result : {'name': 'MILAN', 'age': 25, 'email': 'john123@gmail.com', 'phone': 9879876541, 'weight': 67.98}

            user1_dictionary.pop("age") #remove a key value pair in dictionary (returns the removed value of key), result : {'name': 'MILAN', 'email': 'john123@gmail.com', 'phone': 9879876541, 'weight': 67.98}

            del user1_dictionary["email"] #remove a key value pair in dictionary (doesn't return anything just delete), result : {'name': 'MILAN', 'phone': 9879876541, 'weight': 67.98}

            user1_dictionary.clear() #clears every key value pair in dictionary, result : {}

            del user1_dictionary #removes the entire dictionary variable, result : NameError: name 'user1_dictionary' is not defined

11. IF ELSE STATEMENT
----------------------

a. if else
-----------

      value = 8
      
      if value<0:
          print("value is negative")
      elif value == 0:
          print("value is  zero")
      else:
          print("value is positive")

b. nested if (using if else on if else)
--------------------------------------

      value  = -9
      
      if value>=0:
          if value>0:
              print("this is a positive number")
          else:
              print("this is a zero")
      else:
          print("this is a negative number")

c. if statement with logical operator
-------------------------------------

      age = 20
      
      if age>=18 and age<=30:
          print("you are eligible")
      else:
          print("You are not eligible")

12. WHILE LOOP
--------------
      initialValue =1

      while initialValue<=5:
          print("hello world")
          initialValue+=1

      result:
            hello world
            hello world
            hello world
            hello world
            hello world

13. FOR LOOP
------------
     A. #print each letter in a string
     ---------------------------------

     value = "welcome"
      
     for i in value:
          print(i)

     result:
            w
            e
            l
            c
            o
            m
            e

      B. #print each element in an array (list)
      -----------------------------------------

      fruits  = ["apple","banana","orange","pineapple","mango","grape"]
      for i in fruits:
          print(i)

      result:
            apple
            banana
            orange
            pineapple
            mango
            grape

      C. #print 0-9 
      --------------
      for i in range(10):
          print(i)

      result:
            0
            1
            2
            3
            4
            5
            6
            7
            8
            9

      D. #print 1-10 (starting from 1)
      --------------------------------
      for i in range(1,11):
          print(i)

      result:
            1
            2
            3
            4
            5
            6
            7
            8
            9
            10

14. FUNCTIONS
-------------

      A. #simple function
      --------------------
      def greeting():
          print("Hello world")
      
      greeting()

      result:
            Hello world

      B. #function with arguments and parameters
      ------------------------------------------
      def greeting(name): #parameter
          print(f"Hello {name}!")
      
      greeting("john")#argument

      result:
            Hello john!

      C. #function with return value
      ------------------------------
      def find_sum(num1,num2):
          return num1+num2
      
      print(find_sum(8,7))

      result:
            15



15.RECURSION (calling the function from the function itself)
------------------------------------------------------------

      def input_password():
          value = input("enter password: ")
          if value == "admin":
              print("correct")
          else:
              input_password()
      
      input_password()

      result: 
            This will run until the user enters the correct password "admin" 

16. LAMBDA (Anonymous function) (function without a name)
-------------------------------

      A. Simple lambda function
      -------------------------

      square = lambda value:value*value
      
      print(square(25))

      result:
            625

      B. Lambda to filter odd and even numbers from array (using filter() function)
      -----------------------------------------------------------------------------
      list1 = [1,2,3,4,5,6,7,8,9]
      
      even_numbers = filter(lambda x:x%2==0,list1)
      odd_numbers = filter(lambda x:x%2 ==1,list1)

      print(list(even_numbers)) #result : [2, 4, 6, 8]
      print(list(odd_numbers)) #result : [1, 3, 5, 7, 9]


17. OOPS (OBJECT ORIENTED PROGRAMING)
-------------------------------------
a. simple class
----------------

      
      class VegetablePriceList:
          def __init__(self,name,price,availableQuantity):
              self.name = name                            #property of a class
              self.price = price                          #property of a class
              self.availableQuantity = availableQuantity  #property of a class
      
          def showPriceList(self):    #method of a class
              print(f"name: {self.name} price: {self.price}$ available: {self.availableQuantity}kg")
      
      
      
      vegetable1 = VegetablePriceList("cabbage",10,10)
      vegetable2 = VegetablePriceList("carrot",13,3)
      vegetable1.showPriceList() #result : name: cabbage price: 10$ available: 10kg
      vegetable2.showPriceList() #result : name: carrot price: 13$ available: 3kg
      
      vegetable1.price = 5 #modify  a property in class
      vegetable2.availableQuantity = 12 #modify a property in class
      vegetable1.showPriceList() #result : name: cabbage price: 5$ available: 10kg
      vegetable2.showPriceList() #result : name: carrot price: 13$ available: 12kg

b. Inheritance
--------------
properties and methods (data and behaviour) a child class (subclass) get from the parent class (superclass)

      #parent class
      class Hospital:
          def __init__(self,name,phone):
              self.name = name
              self.phone = phone
      
          def showUserDetails(self):
              print(f"Username : {self.name} phone : {self.phone}")
      
      
      #1st child class
      class Doctor(Hospital):
          pass
      
      #2nd child class
      class Patient(Hospital):
          pass
      
      doctor1 = Doctor("antony",9876567899)
      patient1 = Patient("john",8077809988)
      
      doctor1.showUserDetails() # result :  Username : antony phone : 9876567899
      patient1.showUserDetails() #result :  Username : john phone : 8077809988

      #Doctor and Patient class can access the Hospital functions and properties because the chiild class is inherited from the parent


18. MATH FUNCTIONS
------------------
      
      numbersList = [25,78,98,5,23,11,6]
      #min - shows the small number in an array
      print(min(numbersList)) # result 5
      #max - shows the big number in an array
      print(max(numbersList)) #result 98
      
      #find power of a number (similar to base**exponent)
      
      print(pow(2,3)) #result 8 (2x2x2) ; base 2,exponent 3
      print(pow(25,4)) #result 390625 (25x25x25x25) ; base 25, exponent 4
      
      #with math module
      import math
      
      pi = math.pi
      print(pi) #result : 3.141592653589793 (value of pi π)
      
      squareRoot = math.sqrt(9)
      print(squareRoot) #result : 3 ; 3 is the square root of 9
      
      #gcd - great common divider (the biggest value that could divide all the provided value)
      print(math.gcd(10,20,35,45,85)) #result : 5; the biggest value that can divide all the values 10,20,35,45,85 is 5


19. CUSTOM MODULE
-----------------
myModule.py >>
      def greeting(name):
          print(f"hello {name}")

script.py >>
      import myModule
      
      myModule.greeting("Peter") #result : hello Peter



20. USER INPUTS
----------------
      name = input("Enter your name : ")
      birthYear = int(input("Enter year of  birth : "))
      weight = float(input("Enter your weight : "))
      print(f"Hello {name}, you are {2025-birthYear} years old,your weight is {weight} pounds.")
      
      #result :
      # Enter your name : John
      #Enter year of  birth : 1998
      #Enter your weight : 62.87
      #Hello John, you are 27 years old,your weight is 62.87 pounds.

21. FILE HANDLING (create,write,read,update a file)
----------------------------------------------------------
a. CREATE 
---------
      f = open("sample.txt","w") #replace "sample.txt" with any path or only filename.extension [creates in current path], w = write
      f.close() # result : creates a file named sample.txt

b. WRITE (overwrite)
--------------------
      f = open("sample.txt","w")
      f.write("Hello world") #replace Hello world with any coontent
      f.close() # result :creates a file with text "Hello world"

c. WRITE (append)/UPDATE
------------------------
      f = open("sample.txt","r") #r = read
      
      whole_content = f.read() #read whole content
      first_line = f.readline() #read first line
      array_of_content = f.readlines() #read and make array of each line
      
      print(whole_content)# result :read "sample.txt" and display its  whole content
      print(first_line)# result :read "sample.txt" and display its first line
      print(array_of_content)# result :read "sample.txt" and display each line as element in array
      f.close()

d. ANOTHER METHOD
-----------------

      with open("sample.txt") as f:
          print(f.read())#so no need of f.close()


    

      



      
      
